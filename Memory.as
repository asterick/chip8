package{    import flash.utils.ByteArray;        public class Memory    {        		private const FONT:Array = [                0x3C, 0x66, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0x66, 0x3C,                0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7E,                0x7E, 0xC3, 0x03, 0x03, 0x7E, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF,                0x7E, 0xC3, 0x03, 0x03, 0x1E, 0x03, 0x03, 0x03, 0xC3, 0x7E,								0x1E, 0x36, 0x66, 0xC6, 0xC6, 0xFF, 0x06, 0x06, 0x06, 0x06,				0xFF, 0xC0, 0xC0, 0xC0, 0x7E, 0x03, 0x03, 0x03, 0xC3, 0x7E,                0x3E, 0x60, 0xC0, 0xC0, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0x7E,                0xFF, 0x03, 0x03, 0x06, 0x0C, 0x18, 0x18, 0x18, 0x18, 0x18,                0x7E, 0xC3, 0xC3, 0xC3, 0x7E, 0xC3, 0xC3, 0xC3, 0xC3, 0x7E,                0x7E, 0xC3, 0xC3, 0xC3, 0x7F, 0x03, 0x03, 0x03, 0x06, 0x7C,                0x7E, 0xC3, 0xC3, 0xC3, 0xFF, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3,                0xFE, 0xC3, 0xC3, 0xC3, 0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE,                0x7E, 0xC3, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0, 0xC3, 0x7E,                0xFE, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xC3, 0xFE,                0xFF, 0xC0, 0xC0, 0xC0, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0xFF,                0xFF, 0xC0, 0xC0, 0xC0, 0xFE, 0xC0, 0xC0, 0xC0, 0xC0, 0xC0,                0xf0, 0x90, 0x90, 0x90, 0xf0,                0x20, 0x60, 0x20, 0x20, 0x70,                0xf0, 0x10, 0xf0, 0x80, 0xf0,                0xf0, 0x10, 0xf0, 0x10, 0xf0,                0x90, 0x90, 0xf0, 0x10, 0x10,                0xf0, 0x80, 0xf0, 0x10, 0xf0,                0xf0, 0x80, 0xf0, 0x90, 0xf0,                0xf0, 0x10, 0x20, 0x40, 0x40,                0xf0, 0x90, 0xf0, 0x90, 0xf0,                0xf0, 0x90, 0xf0, 0x10, 0xf0,                0xf0, 0x90, 0xf0, 0x90, 0x90,                0xe0, 0x90, 0xe0, 0x90, 0xe0,                0xf0, 0x80, 0x80, 0x80, 0xf0,                0xe0, 0x90, 0x90, 0x90, 0xe0,                0xf0, 0x80, 0xf0, 0x80, 0xf0,                0xf0, 0x80, 0xf0, 0x80, 0x80 ];		public static const HP48_USER_MEMORY:int = 0x130;        public static const MEMORY_SIZE:uint = 0x1000;        public static const PROGRAM_START:uint = 0x200;        public static const SMALL_FONT_START:uint = 0x00A0;		public static const LARGE_FONT_START:uint = 0x0000;        public static const STACK_START:uint = HP48_USER_MEMORY;				private static const FONT_START:uint = LARGE_FONT_START;        private var _mem:ByteArray;        private var _pc:uint;        private var _sp:uint;        private var _stream:uint;                public function Memory():void        {            _mem = new ByteArray;            _mem.length = MEMORY_SIZE;        }                public function reset( data:ByteArray = null ):void        {            _mem.position = FONT_START;			for each( var i:uint in FONT )				_mem.writeByte(i);            _pc = PROGRAM_START;            _sp = STACK_START;			if( data != null )	            data.readBytes( _mem, PROGRAM_START, data.length );        }                public function readByte():uint        {            return _mem[_stream++];        }                public function readShort():uint        {            _mem.position = _stream;            _stream += 2;            return _mem.readUnsignedShort();        }                public function writeByte(v:uint):void        {            _mem[_stream++] = v;        }                public function writeShort(v:uint):void        {            _mem.position = _stream;            _stream += 2;            _mem.writeShort(v);        }                public function set stream(v:uint):void        {            _stream = v;        }                public function get pc():uint        {            return _pc;        }                public function set pc(v:uint):void        {            _pc = v;        }                public function get op():uint        {            _mem.position = _pc;            _pc += 2;			            return _mem.readUnsignedShort();        }                public function get stack():uint        {            _mem.position = _sp;            _sp += 2;			            return _mem.readUnsignedShort();        }                public function set stack( v:uint ):void        {            _sp -= 2;            _mem.position = _sp;			            _mem.writeShort( v );        }    }}