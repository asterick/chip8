package{	import flash.events.Event;	import flash.geom.Rectangle;	import flash.geom.Point;	import flash.display.Bitmap;	import flash.display.BitmapData;		public class Display extends Bitmap	{				private const CLEAR_COLOR:uint = 0xFF38382E;		private const SET_COLOR:uint = 0xFFE4F1AF;				private var _superchip:Boolean;				public function Display():void		{			super();		}		// -- Video Mode Setup functions -----------------		public function get superchip():Boolean		{			return _superchip;		}		        public function set superchip( hiRes:Boolean ):void        {			var width:uint = hiRes ? 128 : 64;			var height:uint = hiRes ? 64 : 32;			_superchip = hiRes;						scaleX = hiRes ? 1 : 2;			scaleY = hiRes ? 1 : 2;			            bitmapData = new BitmapData( width, height, false, CLEAR_COLOR );        }		public function clearScreen():void		{			bitmapData.fillRect( bitmapData.rect, CLEAR_COLOR );		}				public function scrollDown( px:uint ):void		{			bitmapData.copyPixels( 				bitmapData, 				new Rectangle(0,0,bitmapData.width,bitmapData.height-px), 				new Point(0,px) );			bitmapData.fillRect( new Rectangle(0,0,bitmapData.width,px), CLEAR_COLOR );					}				public function scrollRight():void		{			var px:uint = superchip ? 4 : 2;			bitmapData.copyPixels( 				bitmapData, 				new Rectangle(0,0,bitmapData.width-px,bitmapData.height), 				new Point(px,0) );			bitmapData.fillRect( new Rectangle(0,0,px,bitmapData.height), CLEAR_COLOR );		}		public function scrollLeft():void		{			var px:uint = superchip ? 4 : 2;			bitmapData.copyPixels( 				bitmapData, 				new Rectangle(px,0,bitmapData.width-px,bitmapData.height), 				new Point(0,0) );			bitmapData.fillRect( new Rectangle(bitmapData.width-px,0,px,bitmapData.height), CLEAR_COLOR );		}				public function drawArray( x:uint, y:uint, image:Vector.<uint> ):Boolean		{			// Since the resolution is always a power of two, we can do a bit-wise wrap			x &= bitmapData.width - 1;			y &= bitmapData.height - 1;						var collision:Boolean = false;														for each( var pixels:uint in image )			{				for( var w:uint = 0; w < 16; w++ )					if( ( 0x8000 & (pixels<<w) ) != 0 )						collision = togglePixel( x+w, y ) || collision;				y++;			}									return collision;		}						private function togglePixel( x:uint, y:uint ):Boolean		{			var clr:uint = bitmapData.getPixel32( x, y );			clr = (clr == SET_COLOR) ? CLEAR_COLOR : SET_COLOR;			bitmapData.setPixel32( x, y, clr );			return (clr == CLEAR_COLOR);		}	}}